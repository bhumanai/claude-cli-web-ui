# Main Nginx configuration for Claude CLI Web UI
# Production-ready reverse proxy with SSL/TLS termination

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules if needed
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 8192;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Server tokens (hide nginx version)
    server_tokens off;
    
    # Character encoding
    charset utf-8;
    
    # Logging format with security headers
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format json escape=json '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"upstream_connect_time":"$upstream_connect_time",'
        '"upstream_header_time":"$upstream_header_time",'
        '"upstream_response_time":"$upstream_response_time"'
    '}';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Buffer settings
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeout settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json;
    
    # Security headers (applied globally)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL session settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # DH parameters (generate with: openssl dhparam -out dhparam.pem 2048)
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Real IP configuration (for load balancers)
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Upstream configuration
    upstream claude_backend {
        least_conn;
        server claude-frontend:3000 max_fails=3 fail_timeout=30s;
        # Add more backend servers for load balancing
        # server claude-frontend-2:3000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }
    
    upstream claude_api {
        least_conn;
        server claude-backend:8000 max_fails=3 fail_timeout=30s;
        # Add more API servers for load balancing
        # server claude-backend-2:8000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }
    
    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # Map for HSTS header
    map $scheme $hsts_header {
        https "max-age=31536000; includeSubDomains; preload";
    }
    
    # Server block for HTTP (redirect to HTTPS)
    server {
        listen 80;
        listen [::]:80;
        server_name claude.yourdomain.com www.claude.yourdomain.com;
        
        # Security headers for HTTP
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # Handle Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
        
        # Health check for load balancers
        location /nginx-health {
            access_log off;
            return 200 "healthy nginx\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name claude.yourdomain.com;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/claude.yourdomain.com.crt;
        ssl_certificate_key /etc/nginx/ssl/claude.yourdomain.com.key;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security $hsts_header always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:; frame-ancestors 'none';" always;
        
        # Root and index
        root /var/www/html;
        index index.html;
        
        # Connection limiting
        limit_conn addr 50;
        
        # Logging
        access_log /var/log/nginx/claude_access.log json;
        error_log /var/log/nginx/claude_error.log;
        
        # API endpoints
        location /api/ {
            # Rate limiting for API
            limit_req zone=api burst=20 nodelay;
            
            # Proxy settings
            proxy_pass http://claude_api/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Cache bypass
            proxy_cache_bypass $http_upgrade;
            
            # Handle errors
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }
        
        # WebSocket endpoint
        location /ws {
            # WebSocket proxy settings
            proxy_pass http://claude_api/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            
            # Disable buffering for WebSockets
            proxy_buffering off;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://claude_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://claude_backend;
            proxy_set_header Host $host;
            
            # Long-term caching for static assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # CORS for fonts
            location ~* \.(woff|woff2|ttf|eot)$ {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
            }
        }
        
        # Frontend application
        location / {
            # Rate limiting
            limit_req zone=general burst=10 nodelay;
            
            # Proxy to frontend
            proxy_pass http://claude_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Caching for HTML
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }
        
        # Admin interface (if available)
        location /admin/ {
            # Stricter rate limiting for admin
            limit_req zone=login burst=5 nodelay;
            
            # Optional: IP whitelist for admin access
            # allow 192.168.1.0/24;
            # deny all;
            
            proxy_pass http://claude_api/admin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Metrics endpoint (restrict access)
        location /metrics {
            # Allow only internal networks
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 127.0.0.1;
            deny all;
            
            proxy_pass http://claude_api/metrics;
            proxy_set_header Host $host;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
        }
        
        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Security: Block access to sensitive files
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Security: Block common exploit attempts
        location ~* (wp-admin|wp-login|phpMyAdmin|phpmyadmin) {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # WWW redirect server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.claude.yourdomain.com;
        
        # SSL certificate
        ssl_certificate /etc/nginx/ssl/claude.yourdomain.com.crt;
        ssl_certificate_key /etc/nginx/ssl/claude.yourdomain.com.key;
        
        # Redirect to non-www
        return 301 https://claude.yourdomain.com$request_uri;
    }
    
    # Include additional server configurations
    include /etc/nginx/conf.d/*.conf;
}