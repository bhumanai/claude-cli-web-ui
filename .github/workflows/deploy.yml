# Serverless Deployment Pipeline for Claude CLI Web UI
# Comprehensive CI/CD with Vercel, GitHub, Upstash Redis, and Terragon integration

name: Deploy Claude CLI Web UI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - preview
        - rollback

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements*.txt'
              - 'Dockerfile'
            frontend:
              - 'frontend/**'
              - 'package*.json'
              - 'frontend/Dockerfile'
            infrastructure:
              - 'terraform/**'
              - 'k8s/**'
              - 'docker-compose*.yml'
              - '.github/workflows/**'

      - name: Setup Python
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        if: steps.changes.outputs.backend == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pylint black mypy bandit safety

      - name: Python linting (Black)
        if: steps.changes.outputs.backend == 'true'
        run: |
          black --check --diff backend/

      - name: Python linting (Pylint)
        if: steps.changes.outputs.backend == 'true'
        run: |
          pylint backend/app/ --exit-zero --output-format=github

      - name: Python type checking (MyPy)
        if: steps.changes.outputs.backend == 'true'
        run: |
          mypy backend/app/ --ignore-missing-imports

      - name: Python security scan (Bandit)
        if: steps.changes.outputs.backend == 'true'
        run: |
          bandit -r backend/app/ -f json -o bandit-report.json --exit-zero
          
      - name: Python dependency security scan (Safety)
        if: steps.changes.outputs.backend == 'true'
        run: |
          safety check --json --output safety-report.json --continue-on-error

      - name: Setup Node.js
        if: steps.changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm ci --audit
          npm audit --audit-level=moderate

      - name: Frontend linting (ESLint)
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm run lint

      - name: Frontend type checking
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm run type-check

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript, typescript

      - name: CodeQL Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.backend-changed == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_cli_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_cli_test
        run: |
          cd backend
          python -c "
          import asyncio
          from app.database import create_tables
          asyncio.run(create_tables())
          "

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_cli_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: false
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            backend/pytest-report.xml
            backend/htmlcov/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.frontend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests with coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    if: always() && needs.build-images.result == 'success'

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.component }}-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' && needs.build-images.result == 'success'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name claude-cli-staging-cluster

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|claude-cli/backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}|g" k8s/backend.yaml
          sed -i "s|claude-cli/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" k8s/frontend.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/redis.yaml
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/claude-backend -n claude-cli --timeout=600s
          kubectl rollout status deployment/claude-frontend -n claude-cli --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Get the staging URL
          STAGING_URL=$(kubectl get ingress claude-cli-ingress -n claude-cli -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run basic health checks
          curl -f https://${STAGING_URL}/health || exit 1
          curl -f https://${STAGING_URL}/api/health || exit 1
          
          echo "Staging deployment successful: https://${STAGING_URL}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-staging.result == 'success'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name claude-cli-production-cluster

      - name: Create pre-deployment backup
        run: |
          # Create backup before deployment
          kubectl create job backup-pre-deploy-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/claude-backup -n claude-cli

      - name: Deploy to production
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|claude-cli/backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}|g" k8s/backend.yaml
          sed -i "s|claude-cli/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}|g" k8s/frontend.yaml
          
          # Apply database migrations first
          kubectl apply -f k8s/migration-job.yaml
          kubectl wait --for=condition=complete job/db-migration -n claude-cli --timeout=300s
          
          # Deploy application with rolling update
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/claude-backend -n claude-cli --timeout=900s
          kubectl rollout status deployment/claude-frontend -n claude-cli --timeout=900s

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 120
          
          # Get the production URL
          PROD_URL=$(kubectl get ingress claude-cli-ingress -n claude-cli -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run comprehensive health checks
          curl -f https://${PROD_URL}/health || exit 1
          curl -f https://${PROD_URL}/api/health || exit 1
          
          # Check database connectivity
          kubectl exec deployment/claude-backend -n claude-cli -- python -c "
          import asyncio
          from app.database import test_connection
          asyncio.run(test_connection())
          " || exit 1
          
          echo "Production deployment successful: https://${PROD_URL}"

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            - Automated production deployment
            - Docker images: 
              - Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
              - Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
            
            ## Deployment Details
            - Deployment Time: ${{ github.event.head_commit.timestamp }}
            - Commit SHA: ${{ github.sha }}
            - Deployed by: ${{ github.actor }}
          draft: false
          prerelease: false

  # Rollback (manual trigger)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name claude-cli-production-cluster

      - name: Rollback deployment
        run: |
          # Rollback to previous version
          kubectl rollout undo deployment/claude-backend -n claude-cli
          kubectl rollout undo deployment/claude-frontend -n claude-cli
          
          # Wait for rollback to complete
          kubectl rollout status deployment/claude-backend -n claude-cli --timeout=600s
          kubectl rollout status deployment/claude-frontend -n claude-cli --timeout=600s

      - name: Verify rollback
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Get the production URL
          PROD_URL=$(kubectl get ingress claude-cli-ingress -n claude-cli -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run health checks
          curl -f https://${PROD_URL}/health || exit 1
          curl -f https://${PROD_URL}/api/health || exit 1
          
          echo "Rollback completed successfully"

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'Claude CLI Deployment Failed'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'Claude CLI CI/CD <noreply@claude-cli.com>'
          body: |
            The Claude CLI deployment pipeline has failed.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for more details.